; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --interleave -o.\obj\system_nano1xx.o --depend=.\obj\system_nano1xx.d --feedback=.\obj\START_KIT.fed --cpu=Cortex-M0 --apcs=interwork -O0 -I.\Libraries -I.\Include -I.\Users -ID:\Keil\ARM\INC -ID:\Keil\ARM\INC\Nuvoton -D__MICROLIB -D__LCDDISPLAY_BTL001_LB_H --omf_browse=.\obj\system_nano1xx.crf Libraries\system_nano1xx.c]
                          THUMB

                          AREA ||i.SetSystemClock||, CODE, READONLY, ALIGN=2

                  SetSystemClock PROC
;;;37      *----------------------------------------------------------------------------*/
;;;38     void SetSystemClock(void)
000000  2159              MOVS     r1,#0x59
;;;39     {
;;;40       __IO uint32_t delayCnt;
;;;41       
;;;42       /* Enable system clock source */	
;;;43       UNLOCKREG();
000002  4a3e              LDR      r2,|L1.252|
000004  6011              STR      r1,[r2,#0]
000006  2116              MOVS     r1,#0x16
000008  6011              STR      r1,[r2,#0]
00000a  2188              MOVS     r1,#0x88
00000c  6011              STR      r1,[r2,#0]
;;;44       CLK->PWRCTL |= CLK_PWRCTL_HXT_EN;
00000e  493c              LDR      r1,|L1.256|
000010  6809              LDR      r1,[r1,#0]
000012  2201              MOVS     r2,#1
000014  4311              ORRS     r1,r1,r2
000016  4a3a              LDR      r2,|L1.256|
000018  6011              STR      r1,[r2,#0]
;;;45       LOCKREG();
00001a  2100              MOVS     r1,#0
00001c  4a37              LDR      r2,|L1.252|
00001e  6011              STR      r1,[r2,#0]
;;;46     
;;;47       /* Enable PLL out to 96MHz */
;;;48     #ifdef _NO_USE_HXT_
;;;49       CLK->PLLCTL = (CLK_PLLCTL_PLLSRC_HIRC | PLL_IN_12M_OUT_96M);
;;;50     #else
;;;51       CLK->PLLCTL = (CLK_PLLCTL_PLLSRC_HXT | PLL_IN_12M_OUT_96M);
000020  21ff              MOVS     r1,#0xff
000022  3101              ADDS     r1,#1
000024  4a36              LDR      r2,|L1.256|
000026  6251              STR      r1,[r2,#0x24]
;;;52     #endif
;;;53     
;;;54       /* Waits for PLL clock stable */
;;;55       for (delayCnt=0; delayCnt<100000; delayCnt++)	
000028  2000              MOVS     r0,#0
00002a  e006              B        |L1.58|
                  |L1.44|
;;;56     		if (CLK->CLKSTATUS & CLK_CLKSTATUS_PLL_STB)	break;
00002c  4934              LDR      r1,|L1.256|
00002e  68c9              LDR      r1,[r1,#0xc]
000030  2204              MOVS     r2,#4
000032  4211              TST      r1,r2
000034  d000              BEQ      |L1.56|
000036  e003              B        |L1.64|
                  |L1.56|
000038  1c40              ADDS     r0,r0,#1              ;55
                  |L1.58|
00003a  4932              LDR      r1,|L1.260|
00003c  4288              CMP      r0,r1                 ;55
00003e  d3f5              BCC      |L1.44|
                  |L1.64|
000040  bf00              NOP      
;;;57     
;;;58       /* Change HCLK to PLL output */		  
;;;59       if (delayCnt < 100000) {
000042  4930              LDR      r1,|L1.260|
000044  4288              CMP      r0,r1
000046  d217              BCS      |L1.120|
;;;60     	  CLK->CLKDIV0 = (CLK->CLKDIV0 & ~CLK_CLKDIV0_HCLK_MASK) | 2; /* divider is 3 */
000048  492d              LDR      r1,|L1.256|
00004a  69c9              LDR      r1,[r1,#0x1c]
00004c  0909              LSRS     r1,r1,#4
00004e  0109              LSLS     r1,r1,#4
000050  1c89              ADDS     r1,r1,#2
000052  4a2b              LDR      r2,|L1.256|
000054  61d1              STR      r1,[r2,#0x1c]
;;;61     	  UNLOCKREG();
000056  2159              MOVS     r1,#0x59
000058  4a28              LDR      r2,|L1.252|
00005a  6011              STR      r1,[r2,#0]
00005c  2116              MOVS     r1,#0x16
00005e  6011              STR      r1,[r2,#0]
000060  2188              MOVS     r1,#0x88
000062  6011              STR      r1,[r2,#0]
;;;62           CLK->CLKSEL0 = (CLK->CLKSEL0 & ~CLK_CLKSEL0_HCLK_MASK) | CLK_CLKSEL0_HCLK_PLL;	 /* HCLK = 32MHz */
000064  4926              LDR      r1,|L1.256|
000066  6909              LDR      r1,[r1,#0x10]
000068  08c9              LSRS     r1,r1,#3
00006a  00c9              LSLS     r1,r1,#3
00006c  1c89              ADDS     r1,r1,#2
00006e  4a24              LDR      r2,|L1.256|
000070  6111              STR      r1,[r2,#0x10]
;;;63           LOCKREG();
000072  2100              MOVS     r1,#0
000074  4a21              LDR      r2,|L1.252|
000076  6011              STR      r1,[r2,#0]
                  |L1.120|
;;;64       }
;;;65     
;;;66       /* Set HCLK back to HIRC if error happens */
;;;67       if (CLK->CLKSTATUS  & CLK_CLKSTATUS_CLK_SW_FAIL) 	{
000078  4921              LDR      r1,|L1.256|
00007a  68c9              LDR      r1,[r1,#0xc]
00007c  2280              MOVS     r2,#0x80
00007e  4211              TST      r1,r2
000080  d016              BEQ      |L1.176|
;;;68     	  CLK->CLKDIV0 &= ~CLK_CLKDIV0_HCLK_MASK; /* divider is 1 */
000082  491f              LDR      r1,|L1.256|
000084  69c9              LDR      r1,[r1,#0x1c]
000086  0909              LSRS     r1,r1,#4
000088  0109              LSLS     r1,r1,#4
00008a  4a1d              LDR      r2,|L1.256|
00008c  61d1              STR      r1,[r2,#0x1c]
;;;69     	  UNLOCKREG();
00008e  2159              MOVS     r1,#0x59
000090  4a1a              LDR      r2,|L1.252|
000092  6011              STR      r1,[r2,#0]
000094  2116              MOVS     r1,#0x16
000096  6011              STR      r1,[r2,#0]
000098  2188              MOVS     r1,#0x88
00009a  6011              STR      r1,[r2,#0]
;;;70           CLK->CLKSEL0 = (CLK->CLKSEL0 & ~CLK_CLKSEL0_HCLK_MASK) | CLK_CLKSEL0_HCLK_HIRC;	 /* HCLK = 12MHz */
00009c  4918              LDR      r1,|L1.256|
00009e  6909              LDR      r1,[r1,#0x10]
0000a0  08c9              LSRS     r1,r1,#3
0000a2  00c9              LSLS     r1,r1,#3
0000a4  1dc9              ADDS     r1,r1,#7
0000a6  4a16              LDR      r2,|L1.256|
0000a8  6111              STR      r1,[r2,#0x10]
;;;71           LOCKREG();
0000aa  2100              MOVS     r1,#0
0000ac  4a13              LDR      r2,|L1.252|
0000ae  6011              STR      r1,[r2,#0]
                  |L1.176|
;;;72       }
;;;73       
;;;74       /* Enable UART0 for debug console */
;;;75       MFP_UART0_TO_PORTA();
0000b0  2105              MOVS     r1,#5
0000b2  0709              LSLS     r1,r1,#28
0000b4  6b49              LDR      r1,[r1,#0x34]
0000b6  2277              MOVS     r2,#0x77
0000b8  0612              LSLS     r2,r2,#24
0000ba  4391              BICS     r1,r1,r2
0000bc  2233              MOVS     r2,#0x33
0000be  0652              LSLS     r2,r2,#25
0000c0  1889              ADDS     r1,r1,r2
0000c2  2205              MOVS     r2,#5
0000c4  0712              LSLS     r2,r2,#28
0000c6  6351              STR      r1,[r2,#0x34]
;;;76       //GCR->PB_L_MFP = ((GCR->PB_L_MFP & ~0x7777) | 0x1111);  /* Select multi-function pin for UART0 */
;;;77       CLK->APBCLK |= CLK_APBCLK_UART0_EN;                         /* Enable UART0 clock */
0000c8  490d              LDR      r1,|L1.256|
0000ca  6889              LDR      r1,[r1,#8]
0000cc  2201              MOVS     r2,#1
0000ce  0412              LSLS     r2,r2,#16
0000d0  4311              ORRS     r1,r1,r2
0000d2  4a0b              LDR      r2,|L1.256|
0000d4  6091              STR      r1,[r2,#8]
;;;78       CLK->CLKDIV0 &= ~CLK_CLKDIV0_UART_MASK;
0000d6  4611              MOV      r1,r2
0000d8  69c9              LDR      r1,[r1,#0x1c]
0000da  220f              MOVS     r2,#0xf
0000dc  0212              LSLS     r2,r2,#8
0000de  4391              BICS     r1,r1,r2
0000e0  4a07              LDR      r2,|L1.256|
0000e2  61d1              STR      r1,[r2,#0x1c]
;;;79     #ifdef _NO_USE_HXT_
;;;80       CLK->CLKSEL1 = (CLK->CLKSEL1 & ~CLK_CLKSEL1_UART_MASK) | CLK_CLKSEL1_UART_HIRC;  /* Select 12 Mhz HIRC */
;;;81     #else
;;;82       CLK->CLKSEL1 = (CLK->CLKSEL1 & ~CLK_CLKSEL1_UART_MASK) | CLK_CLKSEL1_UART_HXT;  /* Select 12 Mhz XTAL */
0000e4  4611              MOV      r1,r2
0000e6  6949              LDR      r1,[r1,#0x14]
0000e8  0889              LSRS     r1,r1,#2
0000ea  0089              LSLS     r1,r1,#2
0000ec  6151              STR      r1,[r2,#0x14]
;;;83     #endif
;;;84     
;;;85       UART0->BAUD = 0x67;              /* Baud Rate:115200  OSC:12MHz */
0000ee  2167              MOVS     r1,#0x67
0000f0  4a05              LDR      r2,|L1.264|
0000f2  6251              STR      r1,[r2,#0x24]
;;;86       UART0->TLCTL = 0x03;             /* Character len is 8 bits */
0000f4  2103              MOVS     r1,#3
0000f6  6091              STR      r1,[r2,#8]
;;;87     
;;;88     }
0000f8  4770              BX       lr
;;;89     
                          ENDP

0000fa  0000              DCW      0x0000
                  |L1.252|
                          DCD      0x50000100
                  |L1.256|
                          DCD      0x50000200
                  |L1.260|
                          DCD      0x000186a0
                  |L1.264|
                          DCD      0x40050000

                          AREA ||i.SystemCoreClockUpdate||, CODE, READONLY, ALIGN=2

                  SystemCoreClockUpdate PROC
;;;89     
;;;90     void SystemCoreClockUpdate (void)            /* Get Core Clock Frequency      */
000000  4801              LDR      r0,|L2.8|
;;;91     {
;;;92       SystemCoreClock = __SYSTEM_CLOCK;
000002  4902              LDR      r1,|L2.12|
000004  6008              STR      r0,[r1,#0]  ; SystemCoreClock
;;;93     }
000006  4770              BX       lr
;;;94     
                          ENDP

                  |L2.8|
                          DCD      0x00b71b00
                  |L2.12|
                          DCD      SystemCoreClock

                          AREA ||i.SystemInit||, CODE, READONLY, ALIGN=1

                  SystemInit PROC
;;;103     */
;;;104    void SystemInit (void)
000000  b500              PUSH     {lr}
;;;105    {
;;;106    /* ToDo: add code to initialize the system
;;;107             do not use global variables because this function is called before
;;;108             reaching pre-main. RW section maybe overwritten afterwards.          */
;;;109    
;;;110    
;;;111      //SystemCoreClock = __SYSTEM_CLOCK;
;;;112      SetSystemClock();
000002  f7fffffe          BL       SetSystemClock
;;;113    }
000006  bd00              POP      {pc}
;;;114    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  SystemCoreClock
                          DCD      0x00b71b00
