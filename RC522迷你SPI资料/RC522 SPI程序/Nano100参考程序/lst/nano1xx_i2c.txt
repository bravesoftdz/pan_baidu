; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\nano1xx_i2c.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\nano1xx_i2c.d --feedback=.\obj\START_KIT.fed --cpu=Cortex-M0 --apcs=interwork -O0 -I.\Libraries -I.\Include -I.\Users -ID:\Keil\ARM\RV31\INC -ID:\Keil\ARM\CMSIS\Include -D__MICROLIB -D__LCDDISPLAY_BTL001_LB_H --omf_browse=.\obj\nano1xx_i2c.crf Libraries\nano1xx_i2c.c]
                          THUMB

                          AREA ||i.I2C_Close||, CODE, READONLY, ALIGN=1

                  I2C_Close PROC
;;;82       */
;;;83     void I2C_Close(I2C_TypeDef *I2cPort)
000000  6801              LDR      r1,[r0,#0]
;;;84     {
;;;85         I2cPort->CON &= ~(I2C_CON_INTEN | I2C_CON_IPEN); 
000002  2281              MOVS     r2,#0x81
000004  4391              BICS     r1,r1,r2
000006  6001              STR      r1,[r0,#0]
;;;86     }
000008  4770              BX       lr
;;;87     
                          ENDP


                          AREA ||i.I2C_Ctrl||, CODE, READONLY, ALIGN=1

                  I2C_Ctrl PROC
;;;35       */
;;;36     void I2C_Ctrl(I2C_TypeDef *I2cPort, uint8_t start, uint8_t stop, uint8_t ack)
000000  b570              PUSH     {r4-r6,lr}
;;;37     {	
000002  4604              MOV      r4,r0
;;;38     	uint32_t Reg = 0;
000004  2000              MOVS     r0,#0
;;;39     	
;;;40     	if (start)
000006  2900              CMP      r1,#0
000008  d001              BEQ      |L2.14|
;;;41     		Reg |= I2C_CON_START;
00000a  2508              MOVS     r5,#8
00000c  4328              ORRS     r0,r0,r5
                  |L2.14|
;;;42     	if (stop)
00000e  2a00              CMP      r2,#0
000010  d001              BEQ      |L2.22|
;;;43     	    Reg |= I2C_CON_STOP;
000012  2504              MOVS     r5,#4
000014  4328              ORRS     r0,r0,r5
                  |L2.22|
;;;44     	if (ack)
000016  2b00              CMP      r3,#0
000018  d001              BEQ      |L2.30|
;;;45     		Reg |= I2C_CON_ACK;
00001a  2502              MOVS     r5,#2
00001c  4328              ORRS     r0,r0,r5
                  |L2.30|
;;;46     	
;;;47     	I2cPort->CON = (I2cPort->CON & ~0x1E) | Reg;
00001e  6825              LDR      r5,[r4,#0]
000020  261e              MOVS     r6,#0x1e
000022  43b5              BICS     r5,r5,r6
000024  4305              ORRS     r5,r5,r0
000026  6025              STR      r5,[r4,#0]
;;;48     }
000028  bd70              POP      {r4-r6,pc}
;;;49     
                          ENDP


                          AREA ||i.I2C_DeInit||, CODE, READONLY, ALIGN=2

                  I2C_DeInit PROC
;;;199      */
;;;200    void I2C_DeInit(I2C_TypeDef *I2cPort)
000000  4908              LDR      r1,|L3.36|
;;;201    {
;;;202    	if((uint32_t)I2cPort == I2C1_BASE)
000002  4288              CMP      r0,r1
000004  d106              BNE      |L3.20|
;;;203    		CLK->APBCLK &= ~CLK_APBCLK_I2C1_EN;
000006  4908              LDR      r1,|L3.40|
000008  6889              LDR      r1,[r1,#8]
00000a  1542              ASRS     r2,r0,#21
00000c  4391              BICS     r1,r1,r2
00000e  4a06              LDR      r2,|L3.40|
000010  6091              STR      r1,[r2,#8]
000012  e006              B        |L3.34|
                  |L3.20|
;;;204    	else
;;;205    		CLK->APBCLK &= ~CLK_APBCLK_I2C0_EN;
000014  4904              LDR      r1,|L3.40|
000016  6889              LDR      r1,[r1,#8]
000018  22ff              MOVS     r2,#0xff
00001a  3201              ADDS     r2,#1
00001c  4391              BICS     r1,r1,r2
00001e  4a02              LDR      r2,|L3.40|
000020  6091              STR      r1,[r2,#8]
                  |L3.34|
;;;206    }
000022  4770              BX       lr
;;;207    
                          ENDP

                  |L3.36|
                          DCD      0x40120000
                  |L3.40|
                          DCD      0x50000200

                          AREA ||i.I2C_DisableInt||, CODE, READONLY, ALIGN=2

                  I2C_DisableInt PROC
;;;120      */
;;;121    void I2C_DisableInt(I2C_TypeDef *I2cPort)
000000  b510              PUSH     {r4,lr}
;;;122    {
000002  4604              MOV      r4,r0
;;;123    	I2cPort->CON &= ~I2C_CON_INTEN;
000004  6820              LDR      r0,[r4,#0]
000006  2180              MOVS     r1,#0x80
000008  4388              BICS     r0,r0,r1
00000a  6020              STR      r0,[r4,#0]
;;;124    	
;;;125    	if((uint32_t)I2cPort == I2C0_BASE)	
00000c  4806              LDR      r0,|L4.40|
00000e  4284              CMP      r4,r0
000010  d103              BNE      |L4.26|
;;;126    		NVIC_DisableIRQ(I2C0_IRQn);
000012  2012              MOVS     r0,#0x12
000014  f7fffffe          BL       NVIC_DisableIRQ
000018  e005              B        |L4.38|
                  |L4.26|
;;;127    	else if((uint32_t)I2cPort == I2C1_BASE)	
00001a  4804              LDR      r0,|L4.44|
00001c  4284              CMP      r4,r0
00001e  d102              BNE      |L4.38|
;;;128    		NVIC_DisableIRQ(I2C1_IRQn);   
000020  2013              MOVS     r0,#0x13
000022  f7fffffe          BL       NVIC_DisableIRQ
                  |L4.38|
;;;129    }
000026  bd10              POP      {r4,pc}
;;;130    
                          ENDP

                  |L4.40|
                          DCD      0x40020000
                  |L4.44|
                          DCD      0x40120000

                          AREA ||i.I2C_EnableInt||, CODE, READONLY, ALIGN=2

                  I2C_EnableInt PROC
;;;105      */
;;;106    void I2C_EnableInt(I2C_TypeDef *I2cPort)
000000  b510              PUSH     {r4,lr}
;;;107    {	
000002  4604              MOV      r4,r0
;;;108    	I2cPort->CON |= I2C_CON_INTEN;
000004  6820              LDR      r0,[r4,#0]
000006  2180              MOVS     r1,#0x80
000008  4308              ORRS     r0,r0,r1
00000a  6020              STR      r0,[r4,#0]
;;;109    		
;;;110    	if((uint32_t)I2cPort == I2C0_BASE)	
00000c  4806              LDR      r0,|L5.40|
00000e  4284              CMP      r4,r0
000010  d103              BNE      |L5.26|
;;;111    		NVIC_EnableIRQ(I2C0_IRQn);
000012  2012              MOVS     r0,#0x12
000014  f7fffffe          BL       NVIC_EnableIRQ
000018  e005              B        |L5.38|
                  |L5.26|
;;;112    	else if((uint32_t)I2cPort == I2C1_BASE)	
00001a  4804              LDR      r0,|L5.44|
00001c  4284              CMP      r4,r0
00001e  d102              BNE      |L5.38|
;;;113    		NVIC_EnableIRQ(I2C1_IRQn);	
000020  2013              MOVS     r0,#0x13
000022  f7fffffe          BL       NVIC_EnableIRQ
                  |L5.38|
;;;114    }
000026  bd10              POP      {r4,pc}
;;;115    
                          ENDP

                  |L5.40|
                          DCD      0x40020000
                  |L5.44|
                          DCD      0x40120000

                          AREA ||i.I2C_GetClockFreq||, CODE, READONLY, ALIGN=1

                  I2C_GetClockFreq PROC
;;;92       */
;;;93     uint32_t I2C_GetClockFreq(I2C_TypeDef *I2cPort)
000000  b570              PUSH     {r4-r6,lr}
;;;94     {
000002  4604              MOV      r4,r0
;;;95         uint32_t divider;     
;;;96      
;;;97     	divider = I2cPort->DIV;
000004  68e5              LDR      r5,[r4,#0xc]
;;;98     	return ( SYS_GetHCLKFreq() / ((divider+1)<<2) );
000006  f7fffffe          BL       SYS_GetHCLKFreq
00000a  4606              MOV      r6,r0
00000c  1c68              ADDS     r0,r5,#1
00000e  0081              LSLS     r1,r0,#2
000010  4630              MOV      r0,r6
000012  f7fffffe          BL       __aeabi_uidivmod
;;;99     }
000016  bd70              POP      {r4-r6,pc}
;;;100    
                          ENDP


                          AREA ||i.I2C_Init||, CODE, READONLY, ALIGN=2

                  I2C_Init PROC
;;;186      */
;;;187    void I2C_Init(I2C_TypeDef *I2cPort)
000000  4908              LDR      r1,|L7.36|
;;;188    {
;;;189    	if((uint32_t)I2cPort == I2C1_BASE)
000002  4288              CMP      r0,r1
000004  d106              BNE      |L7.20|
;;;190    		CLK->APBCLK |= CLK_APBCLK_I2C1_EN;
000006  4908              LDR      r1,|L7.40|
000008  6889              LDR      r1,[r1,#8]
00000a  1542              ASRS     r2,r0,#21
00000c  4311              ORRS     r1,r1,r2
00000e  4a06              LDR      r2,|L7.40|
000010  6091              STR      r1,[r2,#8]
000012  e006              B        |L7.34|
                  |L7.20|
;;;191    	else
;;;192    		CLK->APBCLK |= CLK_APBCLK_I2C0_EN;
000014  4904              LDR      r1,|L7.40|
000016  6889              LDR      r1,[r1,#8]
000018  22ff              MOVS     r2,#0xff
00001a  3201              ADDS     r2,#1
00001c  4311              ORRS     r1,r1,r2
00001e  4a02              LDR      r2,|L7.40|
000020  6091              STR      r1,[r2,#8]
                  |L7.34|
;;;193    }
000022  4770              BX       lr
;;;194    
                          ENDP

                  |L7.36|
                          DCD      0x40120000
                  |L7.40|
                          DCD      0x50000200

                          AREA ||i.I2C_Open||, CODE, READONLY, ALIGN=2

                  I2C_Open PROC
;;;56       */
;;;57     void I2C_Open(I2C_TypeDef *I2cPort, uint32_t u32BusClock)
000000  b5f8              PUSH     {r3-r7,lr}
;;;58     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;59         uint32_t divider;     
;;;60      	 	
;;;61     	divider = (uint32_t) (((SYS_GetHCLKFreq()*10)/(u32BusClock * 4) + 5) / 10 - 1);	/* Compute proper divider for I2C clock */
000006  f7fffffe          BL       SYS_GetHCLKFreq
00000a  210a              MOVS     r1,#0xa
00000c  4348              MULS     r0,r1,r0
00000e  4607              MOV      r7,r0
000010  00a9              LSLS     r1,r5,#2
000012  f7fffffe          BL       __aeabi_uidivmod
000016  1d46              ADDS     r6,r0,#5
000018  210a              MOVS     r1,#0xa
00001a  4630              MOV      r0,r6
00001c  f7fffffe          BL       __aeabi_uidivmod
000020  1e40              SUBS     r0,r0,#1
000022  9000              STR      r0,[sp,#0]
;;;62     	
;;;63         if((uint32_t)I2cPort == I2C1_BASE)
000024  4814              LDR      r0,|L8.120|
000026  4284              CMP      r4,r0
000028  d10f              BNE      |L8.74|
;;;64     	{		
;;;65     		GCR->IPRST_CTL2 |= GCR_IPRSTCTL2_I2C1;
00002a  2005              MOVS     r0,#5
00002c  0700              LSLS     r0,r0,#28
00002e  68c0              LDR      r0,[r0,#0xc]
000030  1561              ASRS     r1,r4,#21
000032  4308              ORRS     r0,r0,r1
000034  2105              MOVS     r1,#5
000036  0709              LSLS     r1,r1,#28
000038  60c8              STR      r0,[r1,#0xc]
;;;66     		GCR->IPRST_CTL2 &= ~GCR_IPRSTCTL2_I2C1;		
00003a  4608              MOV      r0,r1
00003c  68c0              LDR      r0,[r0,#0xc]
00003e  1561              ASRS     r1,r4,#21
000040  4388              BICS     r0,r0,r1
000042  2105              MOVS     r1,#5
000044  0709              LSLS     r1,r1,#28
000046  60c8              STR      r0,[r1,#0xc]
000048  e010              B        |L8.108|
                  |L8.74|
;;;67     	}
;;;68     	else
;;;69     	{		
;;;70     		GCR->IPRST_CTL2 |= GCR_IPRSTCTL2_I2C0;
00004a  2005              MOVS     r0,#5
00004c  0700              LSLS     r0,r0,#28
00004e  68c0              LDR      r0,[r0,#0xc]
000050  21ff              MOVS     r1,#0xff
000052  3101              ADDS     r1,#1
000054  4308              ORRS     r0,r0,r1
000056  2105              MOVS     r1,#5
000058  0709              LSLS     r1,r1,#28
00005a  60c8              STR      r0,[r1,#0xc]
;;;71     		GCR->IPRST_CTL2 &= ~GCR_IPRSTCTL2_I2C0;	
00005c  4608              MOV      r0,r1
00005e  68c0              LDR      r0,[r0,#0xc]
000060  21ff              MOVS     r1,#0xff
000062  3101              ADDS     r1,#1
000064  4388              BICS     r0,r0,r1
000066  2105              MOVS     r1,#5
000068  0709              LSLS     r1,r1,#28
00006a  60c8              STR      r0,[r1,#0xc]
                  |L8.108|
;;;72     	}
;;;73     	
;;;74     	I2cPort->DIV = divider;
00006c  9800              LDR      r0,[sp,#0]
00006e  60e0              STR      r0,[r4,#0xc]
;;;75     	I2cPort->CON = I2C_CON_INTEN | I2C_CON_IPEN;
000070  2081              MOVS     r0,#0x81
000072  6020              STR      r0,[r4,#0]
;;;76     }
000074  bdf8              POP      {r3-r7,pc}
;;;77     
                          ENDP

000076  0000              DCW      0x0000
                  |L8.120|
                          DCD      0x40120000

                          AREA ||i.I2C_SetAddress||, CODE, READONLY, ALIGN=1

                  I2C_SetAddress PROC
;;;139      */
;;;140    int32_t I2C_SetAddress(I2C_TypeDef *I2cPort, uint8_t slaveNo, uint8_t slave_addr, uint8_t GC_Flag)
000000  b510              PUSH     {r4,lr}
;;;141    {	
000002  4604              MOV      r4,r0
;;;142    	switch (slaveNo)
000004  2900              CMP      r1,#0
000006  d002              BEQ      |L9.14|
000008  2901              CMP      r1,#1
00000a  d108              BNE      |L9.30|
00000c  e003              B        |L9.22|
                  |L9.14|
;;;143    	{
;;;144    		case 0:
;;;145    			I2cPort->SADDR0 = (slave_addr << 1) | GC_Flag;
00000e  0050              LSLS     r0,r2,#1
000010  4318              ORRS     r0,r0,r3
000012  61a0              STR      r0,[r4,#0x18]
;;;146    			break;
000014  e006              B        |L9.36|
                  |L9.22|
;;;147    		case 1:
;;;148    			I2cPort->SADDR1 = (slave_addr << 1) | GC_Flag;
000016  0050              LSLS     r0,r2,#1
000018  4318              ORRS     r0,r0,r3
00001a  61e0              STR      r0,[r4,#0x1c]
;;;149    			break;			
00001c  e002              B        |L9.36|
                  |L9.30|
;;;150    		default:
;;;151    			return -1;
00001e  2000              MOVS     r0,#0
000020  43c0              MVNS     r0,r0
                  |L9.34|
;;;152    	}
;;;153    
;;;154    	return 0;
;;;155    }
000022  bd10              POP      {r4,pc}
                  |L9.36|
000024  bf00              NOP                            ;146
000026  2000              MOVS     r0,#0                 ;154
000028  e7fb              B        |L9.34|
;;;156    
                          ENDP


                          AREA ||i.I2C_SetAddressMask||, CODE, READONLY, ALIGN=1

                  I2C_SetAddressMask PROC
;;;164      */
;;;165    int32_t I2C_SetAddressMask(I2C_TypeDef *I2cPort, uint8_t slaveNo, uint8_t slaveAddrMask)
000000  4603              MOV      r3,r0
;;;166    {
;;;167    	switch (slaveNo)
000002  2900              CMP      r1,#0
000004  d002              BEQ      |L10.12|
000006  2901              CMP      r1,#1
000008  d106              BNE      |L10.24|
00000a  e002              B        |L10.18|
                  |L10.12|
;;;168    	{
;;;169    		case 0:
;;;170    			I2cPort->SAMASK0 = slaveAddrMask << 1;
00000c  0050              LSLS     r0,r2,#1
00000e  6298              STR      r0,[r3,#0x28]
;;;171    			break;
000010  e005              B        |L10.30|
                  |L10.18|
;;;172    		case 1:
;;;173    			I2cPort->SAMASK1 = slaveAddrMask << 1;
000012  0050              LSLS     r0,r2,#1
000014  62d8              STR      r0,[r3,#0x2c]
;;;174    			break;			
000016  e002              B        |L10.30|
                  |L10.24|
;;;175    		default:
;;;176    			return -1;
000018  2000              MOVS     r0,#0
00001a  43c0              MVNS     r0,r0
                  |L10.28|
;;;177    	}
;;;178    	
;;;179    	return 0;
;;;180    }
00001c  4770              BX       lr
                  |L10.30|
00001e  bf00              NOP                            ;171
000020  2000              MOVS     r0,#0                 ;179
000022  e7fb              B        |L10.28|
;;;181    
                          ENDP


                          AREA ||i.NVIC_DisableIRQ||, CODE, READONLY, ALIGN=2

                  NVIC_DisableIRQ PROC
;;;526     */
;;;527    __STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
000000  06c2              LSLS     r2,r0,#27
;;;528    {
;;;529      NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
000002  0ed2              LSRS     r2,r2,#27
000004  2101              MOVS     r1,#1
000006  4091              LSLS     r1,r1,r2
000008  4a01              LDR      r2,|L11.16|
00000a  6011              STR      r1,[r2,#0]
;;;530    }
00000c  4770              BX       lr
;;;531    
                          ENDP

00000e  0000              DCW      0x0000
                  |L11.16|
                          DCD      0xe000e180

                          AREA ||i.NVIC_EnableIRQ||, CODE, READONLY, ALIGN=2

                  NVIC_EnableIRQ PROC
;;;514     */
;;;515    __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
000000  06c2              LSLS     r2,r0,#27
;;;516    {
;;;517      NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
000002  0ed2              LSRS     r2,r2,#27
000004  2101              MOVS     r1,#1
000006  4091              LSLS     r1,r1,r2
000008  4a01              LDR      r2,|L12.16|
00000a  6011              STR      r1,[r2,#0]
;;;518    }
00000c  4770              BX       lr
;;;519    
                          ENDP

00000e  0000              DCW      0x0000
                  |L12.16|
                          DCD      0xe000e100

;*** Start embedded assembler ***

#line 1 "Libraries\\nano1xx_i2c.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___13_nano1xx_i2c_c_I2C_Ctrl____REV16|
#line 129 "D:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___13_nano1xx_i2c_c_I2C_Ctrl____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___13_nano1xx_i2c_c_I2C_Ctrl____REVSH|
#line 144
|__asm___13_nano1xx_i2c_c_I2C_Ctrl____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
