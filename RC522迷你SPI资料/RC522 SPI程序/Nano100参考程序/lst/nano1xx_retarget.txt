; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\nano1xx_retarget.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\nano1xx_retarget.d --feedback=.\obj\START_KIT.fed --cpu=Cortex-M0 --apcs=interwork -O0 -I.\Libraries -I.\Include -I.\Users -ID:\Keil\ARM\RV31\INC -ID:\Keil\ARM\CMSIS\Include -D__MICROLIB -D__LCDDISPLAY_BTL001_LB_H --omf_browse=.\obj\nano1xx_retarget.crf Libraries\nano1xx_retarget.c]
                          THUMB

                          AREA ||i.GetChar||, CODE, READONLY, ALIGN=2

                  GetChar PROC
;;;109    /*---------------------------------------------------------------------------------------------------------*/
;;;110    char GetChar(void)
000000  e008              B        |L1.20|
                  |L1.2|
;;;111    {
;;;112    #if defined(DEBUG_ENABLE_SEMIHOST) && !defined(__ICCARM__) /* IAR don't support semihosted getchar */
;;;113    	int nRet;
;;;114    	while(SH_DoCommand(0x101, 0, &nRet) != 0)
;;;115    	{
;;;116    		if(nRet != 0)
;;;117    		{
;;;118    			SH_DoCommand(0x07, 0, &nRet);
;;;119    			return (char)nRet;
;;;120    		}
;;;121    	}
;;;122    #endif
;;;123    
;;;124    	if(DEBUG_PORT == 1)
;;;125    	{
;;;126    		while (1){
;;;127    			if((UART1->FSR & UART_FSR_RX_EMPTY_F) == 0 )
;;;128    			{
;;;129    				return (UART1->RBR);
;;;130    				
;;;131    		    }
;;;132    		}
;;;133    	}
;;;134    	else if(DEBUG_PORT == 0)
;;;135    	{
;;;136    		while (1){
;;;137    			if((UART0->FSR & UART_FSR_RX_EMPTY_F) == 0 )
000002  4805              LDR      r0,|L1.24|
000004  6980              LDR      r0,[r0,#0x18]
000006  2102              MOVS     r1,#2
000008  4208              TST      r0,r1
00000a  d103              BNE      |L1.20|
;;;138    			{
;;;139    				return (UART0->RBR);
00000c  4802              LDR      r0,|L1.24|
00000e  6800              LDR      r0,[r0,#0]
000010  b2c0              UXTB     r0,r0
;;;140    				
;;;141    		    }
;;;142    		}
;;;143    	}
;;;144    	else 
;;;145    		return NULL;
;;;146    
;;;147    }
000012  4770              BX       lr
                  |L1.20|
000014  e7f5              B        |L1.2|
;;;148    
                          ENDP

000016  0000              DCW      0x0000
                  |L1.24|
                          DCD      0x40050000

                          AREA ||i.IsDebugFifoEmpty||, CODE, READONLY, ALIGN=2

                  IsDebugFifoEmpty PROC
;;;173    /*---------------------------------------------------------------------------------------------------------*/
;;;174    int IsDebugFifoEmpty(void)
000000  4804              LDR      r0,|L2.20|
;;;175    {
;;;176    #if(DEBUG_PORT == 0)
;;;177        if (UART0->FSR & UART_FSR_TE_F)
000002  6980              LDR      r0,[r0,#0x18]
000004  2101              MOVS     r1,#1
000006  02c9              LSLS     r1,r1,#11
000008  4208              TST      r0,r1
00000a  d001              BEQ      |L2.16|
;;;178    	   return 1;
00000c  2001              MOVS     r0,#1
                  |L2.14|
;;;179    	else
;;;180    		return 0;
;;;181    #elif(DEBUG_PORT == 1)
;;;182        if (UART1->FSR & UART_FSR_TE_F)
;;;183    	   return 1;
;;;184    	else
;;;185    	   return 0;
;;;186    #else
;;;187        if (UART2->FSR & UART_FSR_TE_F)
;;;188    	   return 1;
;;;189    	else
;;;190    	   return 0;
;;;191    #endif    
;;;192    }
00000e  4770              BX       lr
                  |L2.16|
000010  2000              MOVS     r0,#0                 ;180
000012  e7fc              B        |L2.14|
;;;193    
                          ENDP

                  |L2.20|
                          DCD      0x40050000

                          AREA ||i.SendChar||, CODE, READONLY, ALIGN=1

                  SendChar PROC
;;;77     
;;;78     void SendChar(int ch)
000000  b500              PUSH     {lr}
;;;79     {
000002  4603              MOV      r3,r0
;;;80     #if defined(DEBUG_ENABLE_SEMIHOST)
;;;81     	g_buf[g_buf_len++] = ch;
;;;82     	g_buf[g_buf_len] = '\0';
;;;83     	if(g_buf_len + 1 >= sizeof(g_buf) || ch == '\n' || ch == '\0')
;;;84     	{
;;;85     
;;;86     		/* Send the char */
;;;87     		if(SH_DoCommand(0x04, (int)g_buf, NULL) != 0)
;;;88             {
;;;89                 g_buf_len = 0;
;;;90     			return;
;;;91             }
;;;92             else
;;;93             {
;;;94                 int i;
;;;95     
;;;96                 for(i=0;i<g_buf_len;i++)
;;;97                     SendChar_ToUART(g_buf[i]);
;;;98     		    g_buf_len = 0;
;;;99             }
;;;100    	}
;;;101    #else
;;;102        SendChar_ToUART(ch);
000004  4618              MOV      r0,r3
000006  f7fffffe          BL       SendChar_ToUART
;;;103    #endif
;;;104    }
00000a  bd00              POP      {pc}
;;;105    
                          ENDP


                          AREA ||i.SendChar_ToUART||, CODE, READONLY, ALIGN=2

                  SendChar_ToUART PROC
;;;52     
;;;53     void SendChar_ToUART(int ch)
000000  bf00              NOP      
                  |L4.2|
;;;54     {
;;;55     	if(DEBUG_PORT == 1)
;;;56     	{
;;;57     	    while(UART1->FSR & UART_FSR_TX_FULL_F);
;;;58     		UART1->THR = ch;
;;;59     	    if(ch == '\n'){
;;;60     	        while(UART1->FSR & UART_FSR_TX_FULL_F);
;;;61     	        UART1->THR = '\r';
;;;62     	    }
;;;63     	}
;;;64     	else if(DEBUG_PORT == 0)
;;;65     	{
;;;66     		while(UART0->FSR & UART_FSR_TX_FULL_F);
000002  490a              LDR      r1,|L4.44|
000004  6989              LDR      r1,[r1,#0x18]
000006  2201              MOVS     r2,#1
000008  0292              LSLS     r2,r2,#10
00000a  4211              TST      r1,r2
00000c  d1f9              BNE      |L4.2|
;;;67     		UART0->THR = ch;
00000e  4907              LDR      r1,|L4.44|
000010  6008              STR      r0,[r1,#0]
;;;68     	    if(ch == '\n'){
000012  280a              CMP      r0,#0xa
000014  d109              BNE      |L4.42|
;;;69     	        while(UART0->FSR & UART_FSR_TX_FULL_F);
000016  bf00              NOP      
                  |L4.24|
000018  4904              LDR      r1,|L4.44|
00001a  6989              LDR      r1,[r1,#0x18]
00001c  2201              MOVS     r2,#1
00001e  0292              LSLS     r2,r2,#10
000020  4211              TST      r1,r2
000022  d1f9              BNE      |L4.24|
;;;70     	        UART0->THR = '\r';
000024  210d              MOVS     r1,#0xd
000026  4a01              LDR      r2,|L4.44|
000028  6011              STR      r1,[r2,#0]
                  |L4.42|
;;;71     	    }
;;;72     	}
;;;73     	else 
;;;74     		;
;;;75     }
00002a  4770              BX       lr
;;;76     
                          ENDP

                  |L4.44|
                          DCD      0x40050000

                          AREA ||i._ttywrch||, CODE, READONLY, ALIGN=1

                  _ttywrch PROC
;;;196    /*---------------------------------------------------------------------------------------------------------*/
;;;197    void _ttywrch(int ch)
000000  b510              PUSH     {r4,lr}
;;;198    {
000002  4604              MOV      r4,r0
;;;199      SendChar(ch);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       SendChar
;;;200      return;
;;;201    }
00000a  bd10              POP      {r4,pc}
;;;202    
                          ENDP


                          AREA ||i.ferror||, CODE, READONLY, ALIGN=1

                  ferror PROC
;;;213    
;;;214    int ferror(FILE *f) {
000000  4601              MOV      r1,r0
;;;215      return EOF;
000002  2000              MOVS     r0,#0
000004  43c0              MVNS     r0,r0
;;;216    }
000006  4770              BX       lr
;;;217    
                          ENDP


                          AREA ||i.fgetc||, CODE, READONLY, ALIGN=1

                  fgetc PROC
;;;208    
;;;209    int fgetc(FILE *f) {
000000  b500              PUSH     {lr}
000002  4602              MOV      r2,r0
;;;210      return (GetChar());
000004  f7fffffe          BL       GetChar
;;;211    }
000008  bd00              POP      {pc}
;;;212    
                          ENDP


                          AREA ||i.fputc||, CODE, READONLY, ALIGN=1

                  fputc PROC
;;;202    
;;;203    int fputc(int ch, FILE *f)
000000  b530              PUSH     {r4,r5,lr}
;;;204    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;205      SendChar(ch);
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       SendChar
;;;206      return ch;
00000c  4620              MOV      r0,r4
;;;207    }
00000e  bd30              POP      {r4,r5,pc}
;;;208    
                          ENDP


                          AREA ||i.kbhit||, CODE, READONLY, ALIGN=2

                  kbhit PROC
;;;151    /*---------------------------------------------------------------------------------------------------------*/
;;;152    int kbhit(void)
000000  4804              LDR      r0,|L9.20|
;;;153    {
;;;154    #if(DEBUG_PORT == 0)
;;;155        if (UART0->FSR & UART_FSR_RX_EMPTY_F)
000002  6980              LDR      r0,[r0,#0x18]
000004  2102              MOVS     r1,#2
000006  4208              TST      r0,r1
000008  d001              BEQ      |L9.14|
;;;156    	    return 0;
00000a  2000              MOVS     r0,#0
                  |L9.12|
;;;157    	else
;;;158    		return 1;
;;;159    #elif(DEBUG_PORT == 1)
;;;160        if (UART1->FSR & UART_FSR_RX_EMPTY_F)
;;;161    	    return 0;
;;;162    	else
;;;163    		return 1;
;;;164    #else
;;;165        if (UART2->FSR & UART_FSR_RX_EMPTY_F)
;;;166    	    return 0;
;;;167    	else
;;;168    		return 1;
;;;169    #endif    
;;;170    }
00000c  4770              BX       lr
                  |L9.14|
00000e  2001              MOVS     r0,#1                 ;158
000010  e7fc              B        |L9.12|
;;;171    /*---------------------------------------------------------------------------------------------------------*/
                          ENDP

000012  0000              DCW      0x0000
                  |L9.20|
                          DCD      0x40050000

                          AREA ||.data||, DATA, ALIGN=2

                  __stdout
                          DCD      0x00000000
                  __stdin
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "Libraries\\nano1xx_retarget.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___18_nano1xx_retarget_c_871f546e____REV16|
#line 129 "D:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___18_nano1xx_retarget_c_871f546e____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___18_nano1xx_retarget_c_871f546e____REVSH|
#line 144
|__asm___18_nano1xx_retarget_c_871f546e____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
