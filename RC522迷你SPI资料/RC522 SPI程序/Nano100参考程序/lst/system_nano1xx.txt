; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\system_nano1xx.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\system_nano1xx.d --feedback=.\obj\START_KIT.fed --cpu=Cortex-M0 --apcs=interwork -O0 -I.\Libraries -I.\Include -I.\Users -ID:\Keil\ARM\RV31\INC -ID:\Keil\ARM\CMSIS\Include -D__MICROLIB -D__LCDDISPLAY_BTL001_LB_H --omf_browse=.\obj\system_nano1xx.crf Libraries\system_nano1xx.c]
                          THUMB

                          AREA ||i.SetSystemClock||, CODE, READONLY, ALIGN=2

                  SetSystemClock PROC
;;;37      *----------------------------------------------------------------------------*/
;;;38     void SetSystemClock(void)
000000  b508              PUSH     {r3,lr}
;;;39     {
;;;40       __IO uint32_t delayCnt;
;;;41       
;;;42       /* Enable system clock source */	
;;;43       UNLOCKREG();
000002  2059              MOVS     r0,#0x59
000004  4940              LDR      r1,|L1.264|
000006  6008              STR      r0,[r1,#0]
000008  2016              MOVS     r0,#0x16
00000a  6008              STR      r0,[r1,#0]
00000c  2088              MOVS     r0,#0x88
00000e  6008              STR      r0,[r1,#0]
;;;44       CLK->PWRCTL |= CLK_PWRCTL_HXT_EN;
000010  483e              LDR      r0,|L1.268|
000012  6800              LDR      r0,[r0,#0]
000014  2101              MOVS     r1,#1
000016  4308              ORRS     r0,r0,r1
000018  493c              LDR      r1,|L1.268|
00001a  6008              STR      r0,[r1,#0]
;;;45       LOCKREG();
00001c  2000              MOVS     r0,#0
00001e  493a              LDR      r1,|L1.264|
000020  6008              STR      r0,[r1,#0]
;;;46     
;;;47       /* Enable PLL out to 96MHz */
;;;48     #ifdef _NO_USE_HXT_
;;;49       CLK->PLLCTL = (CLK_PLLCTL_PLLSRC_HIRC | PLL_IN_12M_OUT_96M);
;;;50     #else
;;;51       CLK->PLLCTL = (CLK_PLLCTL_PLLSRC_HXT | PLL_IN_12M_OUT_96M);
000022  20ff              MOVS     r0,#0xff
000024  3001              ADDS     r0,#1
000026  4939              LDR      r1,|L1.268|
000028  6248              STR      r0,[r1,#0x24]
;;;52     #endif
;;;53     
;;;54       /* Waits for PLL clock stable */
;;;55       for (delayCnt=0; delayCnt<100000; delayCnt++)	
00002a  2000              MOVS     r0,#0
00002c  9000              STR      r0,[sp,#0]
00002e  e008              B        |L1.66|
                  |L1.48|
;;;56     		if (CLK->CLKSTATUS & CLK_CLKSTATUS_PLL_STB)	break;
000030  4836              LDR      r0,|L1.268|
000032  68c0              LDR      r0,[r0,#0xc]
000034  2104              MOVS     r1,#4
000036  4208              TST      r0,r1
000038  d000              BEQ      |L1.60|
00003a  e006              B        |L1.74|
                  |L1.60|
00003c  9800              LDR      r0,[sp,#0]            ;55
00003e  1c40              ADDS     r0,r0,#1              ;55
000040  9000              STR      r0,[sp,#0]            ;55
                  |L1.66|
000042  4933              LDR      r1,|L1.272|
000044  9800              LDR      r0,[sp,#0]            ;55
000046  4288              CMP      r0,r1                 ;55
000048  d3f2              BCC      |L1.48|
                  |L1.74|
00004a  bf00              NOP      
;;;57     
;;;58       /* Change HCLK to PLL output */		  
;;;59       if (delayCnt < 100000) {
00004c  4930              LDR      r1,|L1.272|
00004e  9800              LDR      r0,[sp,#0]
000050  4288              CMP      r0,r1
000052  d217              BCS      |L1.132|
;;;60     	  CLK->CLKDIV0 = (CLK->CLKDIV0 & ~CLK_CLKDIV0_HCLK_MASK) | 2; /* divider is 3 */
000054  482d              LDR      r0,|L1.268|
000056  69c0              LDR      r0,[r0,#0x1c]
000058  0900              LSRS     r0,r0,#4
00005a  0100              LSLS     r0,r0,#4
00005c  1c80              ADDS     r0,r0,#2
00005e  492b              LDR      r1,|L1.268|
000060  61c8              STR      r0,[r1,#0x1c]
;;;61     	  UNLOCKREG();
000062  2059              MOVS     r0,#0x59
000064  4928              LDR      r1,|L1.264|
000066  6008              STR      r0,[r1,#0]
000068  2016              MOVS     r0,#0x16
00006a  6008              STR      r0,[r1,#0]
00006c  2088              MOVS     r0,#0x88
00006e  6008              STR      r0,[r1,#0]
;;;62           CLK->CLKSEL0 = (CLK->CLKSEL0 & ~CLK_CLKSEL0_HCLK_MASK) | CLK_CLKSEL0_HCLK_PLL;	 /* HCLK = 32MHz */
000070  4826              LDR      r0,|L1.268|
000072  6900              LDR      r0,[r0,#0x10]
000074  08c0              LSRS     r0,r0,#3
000076  00c0              LSLS     r0,r0,#3
000078  1c80              ADDS     r0,r0,#2
00007a  4924              LDR      r1,|L1.268|
00007c  6108              STR      r0,[r1,#0x10]
;;;63           LOCKREG();
00007e  2000              MOVS     r0,#0
000080  4921              LDR      r1,|L1.264|
000082  6008              STR      r0,[r1,#0]
                  |L1.132|
;;;64       }
;;;65     
;;;66       /* Set HCLK back to HIRC if error happens */
;;;67       if (CLK->CLKSTATUS  & CLK_CLKSTATUS_CLK_SW_FAIL) 	{
000084  4821              LDR      r0,|L1.268|
000086  68c0              LDR      r0,[r0,#0xc]
000088  2180              MOVS     r1,#0x80
00008a  4208              TST      r0,r1
00008c  d016              BEQ      |L1.188|
;;;68     	  CLK->CLKDIV0 &= ~CLK_CLKDIV0_HCLK_MASK; /* divider is 1 */
00008e  481f              LDR      r0,|L1.268|
000090  69c0              LDR      r0,[r0,#0x1c]
000092  0900              LSRS     r0,r0,#4
000094  0100              LSLS     r0,r0,#4
000096  491d              LDR      r1,|L1.268|
000098  61c8              STR      r0,[r1,#0x1c]
;;;69     	  UNLOCKREG();
00009a  2059              MOVS     r0,#0x59
00009c  491a              LDR      r1,|L1.264|
00009e  6008              STR      r0,[r1,#0]
0000a0  2016              MOVS     r0,#0x16
0000a2  6008              STR      r0,[r1,#0]
0000a4  2088              MOVS     r0,#0x88
0000a6  6008              STR      r0,[r1,#0]
;;;70           CLK->CLKSEL0 = (CLK->CLKSEL0 & ~CLK_CLKSEL0_HCLK_MASK) | CLK_CLKSEL0_HCLK_HIRC;	 /* HCLK = 12MHz */
0000a8  4818              LDR      r0,|L1.268|
0000aa  6900              LDR      r0,[r0,#0x10]
0000ac  08c0              LSRS     r0,r0,#3
0000ae  00c0              LSLS     r0,r0,#3
0000b0  1dc0              ADDS     r0,r0,#7
0000b2  4916              LDR      r1,|L1.268|
0000b4  6108              STR      r0,[r1,#0x10]
;;;71           LOCKREG();
0000b6  2000              MOVS     r0,#0
0000b8  4913              LDR      r1,|L1.264|
0000ba  6008              STR      r0,[r1,#0]
                  |L1.188|
;;;72       }
;;;73       
;;;74       /* Enable UART0 for debug console */
;;;75       MFP_UART0_TO_PORTA();
0000bc  2005              MOVS     r0,#5
0000be  0700              LSLS     r0,r0,#28
0000c0  6b40              LDR      r0,[r0,#0x34]
0000c2  2177              MOVS     r1,#0x77
0000c4  0609              LSLS     r1,r1,#24
0000c6  4388              BICS     r0,r0,r1
0000c8  2133              MOVS     r1,#0x33
0000ca  0649              LSLS     r1,r1,#25
0000cc  1840              ADDS     r0,r0,r1
0000ce  2105              MOVS     r1,#5
0000d0  0709              LSLS     r1,r1,#28
0000d2  6348              STR      r0,[r1,#0x34]
;;;76       //GCR->PB_L_MFP = ((GCR->PB_L_MFP & ~0x7777) | 0x1111);  /* Select multi-function pin for UART0 */
;;;77       CLK->APBCLK |= CLK_APBCLK_UART0_EN;                         /* Enable UART0 clock */
0000d4  480d              LDR      r0,|L1.268|
0000d6  6880              LDR      r0,[r0,#8]
0000d8  2101              MOVS     r1,#1
0000da  0409              LSLS     r1,r1,#16
0000dc  4308              ORRS     r0,r0,r1
0000de  490b              LDR      r1,|L1.268|
0000e0  6088              STR      r0,[r1,#8]
;;;78       CLK->CLKDIV0 &= ~CLK_CLKDIV0_UART_MASK;
0000e2  4608              MOV      r0,r1
0000e4  69c0              LDR      r0,[r0,#0x1c]
0000e6  210f              MOVS     r1,#0xf
0000e8  0209              LSLS     r1,r1,#8
0000ea  4388              BICS     r0,r0,r1
0000ec  4907              LDR      r1,|L1.268|
0000ee  61c8              STR      r0,[r1,#0x1c]
;;;79     #ifdef _NO_USE_HXT_
;;;80       CLK->CLKSEL1 = (CLK->CLKSEL1 & ~CLK_CLKSEL1_UART_MASK) | CLK_CLKSEL1_UART_HIRC;  /* Select 12 Mhz HIRC */
;;;81     #else
;;;82       CLK->CLKSEL1 = (CLK->CLKSEL1 & ~CLK_CLKSEL1_UART_MASK) | CLK_CLKSEL1_UART_HXT;  /* Select 12 Mhz XTAL */
0000f0  4608              MOV      r0,r1
0000f2  6940              LDR      r0,[r0,#0x14]
0000f4  0880              LSRS     r0,r0,#2
0000f6  0080              LSLS     r0,r0,#2
0000f8  6148              STR      r0,[r1,#0x14]
;;;83     #endif
;;;84     
;;;85       UART0->BAUD = 0x67;              /* Baud Rate:115200  OSC:12MHz */
0000fa  2067              MOVS     r0,#0x67
0000fc  4905              LDR      r1,|L1.276|
0000fe  6248              STR      r0,[r1,#0x24]
;;;86       UART0->TLCTL = 0x03;             /* Character len is 8 bits */
000100  2003              MOVS     r0,#3
000102  6088              STR      r0,[r1,#8]
;;;87     
;;;88     }
000104  bd08              POP      {r3,pc}
;;;89     
                          ENDP

000106  0000              DCW      0x0000
                  |L1.264|
                          DCD      0x50000100
                  |L1.268|
                          DCD      0x50000200
                  |L1.272|
                          DCD      0x000186a0
                  |L1.276|
                          DCD      0x40050000

                          AREA ||i.SystemCoreClockUpdate||, CODE, READONLY, ALIGN=2

                  SystemCoreClockUpdate PROC
;;;89     
;;;90     void SystemCoreClockUpdate (void)            /* Get Core Clock Frequency      */
000000  4801              LDR      r0,|L2.8|
;;;91     {
;;;92       SystemCoreClock = __SYSTEM_CLOCK;
000002  4902              LDR      r1,|L2.12|
000004  6008              STR      r0,[r1,#0]  ; SystemCoreClock
;;;93     }
000006  4770              BX       lr
;;;94     
                          ENDP

                  |L2.8|
                          DCD      0x00b71b00
                  |L2.12|
                          DCD      SystemCoreClock

                          AREA ||i.SystemInit||, CODE, READONLY, ALIGN=1

                  SystemInit PROC
;;;103     */
;;;104    void SystemInit (void)
000000  b500              PUSH     {lr}
;;;105    {
;;;106    /* ToDo: add code to initialize the system
;;;107             do not use global variables because this function is called before
;;;108             reaching pre-main. RW section maybe overwritten afterwards.          */
;;;109    
;;;110    
;;;111      //SystemCoreClock = __SYSTEM_CLOCK;
;;;112      SetSystemClock();
000002  f7fffffe          BL       SetSystemClock
;;;113    }
000006  bd00              POP      {pc}
;;;114    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  SystemCoreClock
                          DCD      0x00b71b00

;*** Start embedded assembler ***

#line 1 "Libraries\\system_nano1xx.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___16_system_nano1xx_c_5d646a67____REV16|
#line 129 "D:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___16_system_nano1xx_c_5d646a67____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___16_system_nano1xx_c_5d646a67____REVSH|
#line 144
|__asm___16_system_nano1xx_c_5d646a67____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
