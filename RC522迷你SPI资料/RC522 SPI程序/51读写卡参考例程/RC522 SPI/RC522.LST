C51 COMPILER V9.52.0.0   RC522                                                             12/07/2014 15:55:12 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE RC522
OBJECT MODULE PLACED IN RC522.OBJ
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE RC522.C OPTIMIZE(8,SPEED) BROWSE TABS(2)

line level    source

   1          #include <intrins.h>
   2          #include "reg52.h"
   3          #include "main.h"
   4          #include "mfrc522.h"
   5          //#include <string.h> 
   6          
   7          #define MAXRLEN 18                        
   8          /////////////////////////////////////////////////////////////////////
   9          //功    能：寻卡
  10          //参数说明: req_code[IN]:寻卡方式
  11          //                0x52 = 寻感应区内所有符合14443A标准的卡
  12          //                0x26 = 寻未进入休眠状态的卡
  13          //              pTagType[OUT]：卡片类型代码
  14          //                0x4400 = Mifare_UltraLight
  15          //                0x0400 = Mifare_One(S50)
  16          //                0x0200 = Mifare_One(S70)
  17          //                0x0800 = Mifare_Pro(X)
  18          //                0x4403 = Mifare_DESFire
  19          //返    回: 成功返回MI_OK
  20          /////////////////////////////////////////////////////////////////////
  21          char PcdRequest(unsigned char req_code,unsigned char *pTagType)
  22          {
  23   1         char status;  
  24   1         unsigned int  unLen;
  25   1         unsigned char ucComMF522Buf[MAXRLEN]; 
  26   1      //  unsigned char xTest ;
  27   1         ClearBitMask(Status2Reg,0x08);
  28   1         WriteRawRC(BitFramingReg,0x07);
  29   1      
  30   1      //  xTest = ReadRawRC(BitFramingReg);
  31   1      //  if(xTest == 0x07 )
  32   1       //   { LED_GREEN  =0 ;}
  33   1       // else {LED_GREEN =1 ;while(1){}}
  34   1         SetBitMask(TxControlReg,0x03);
  35   1       
  36   1         ucComMF522Buf[0] = req_code;
  37   1      
  38   1         status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,1,ucComMF522Buf,&unLen);
  39   1      //     if(status  == MI_OK )
  40   1      //   { LED_GREEN  =0 ;}
  41   1      //   else {LED_GREEN =1 ;}
  42   1         if ((status == MI_OK) && (unLen == 0x10))
  43   1         {    
  44   2             *pTagType     = ucComMF522Buf[0];
  45   2             *(pTagType+1) = ucComMF522Buf[1];
  46   2         }
  47   1         else
  48   1         {   status = MI_ERR;   }
  49   1         
  50   1         return status;
  51   1      }
  52          
  53          /////////////////////////////////////////////////////////////////////
  54          //功    能：防冲撞
  55          //参数说明: pSnr[OUT]:卡片序列号，4字节
C51 COMPILER V9.52.0.0   RC522                                                             12/07/2014 15:55:12 PAGE 2   

  56          //返    回: 成功返回MI_OK
  57          /////////////////////////////////////////////////////////////////////  
  58          char PcdAnticoll(unsigned char *pSnr)
  59          {
  60   1          char status;
  61   1          unsigned char i,snr_check=0;
  62   1          unsigned int  unLen;
  63   1          unsigned char ucComMF522Buf[MAXRLEN]; 
  64   1          
  65   1      
  66   1          ClearBitMask(Status2Reg,0x08);
  67   1          WriteRawRC(BitFramingReg,0x00);
  68   1          ClearBitMask(CollReg,0x80);
  69   1       
  70   1          ucComMF522Buf[0] = PICC_ANTICOLL1;
  71   1          ucComMF522Buf[1] = 0x20;
  72   1      
  73   1          status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,2,ucComMF522Buf,&unLen);
  74   1      
  75   1          if (status == MI_OK)
  76   1          {
  77   2             for (i=0; i<4; i++)
  78   2               {   
  79   3                   *(pSnr+i)  = ucComMF522Buf[i];
  80   3                   snr_check ^= ucComMF522Buf[i];
  81   3               }
  82   2               if (snr_check != ucComMF522Buf[i])
  83   2               {   status = MI_ERR;    }
  84   2          }
  85   1          
  86   1          SetBitMask(CollReg,0x80);
  87   1          return status;
  88   1      }
  89          
  90          /////////////////////////////////////////////////////////////////////
  91          //功    能：选定卡片
  92          //参数说明: pSnr[IN]:卡片序列号，4字节
  93          //返    回: 成功返回MI_OK
  94          /////////////////////////////////////////////////////////////////////
  95          char PcdSelect(unsigned char *pSnr)
  96          {
  97   1          char status;
  98   1          unsigned char i;
  99   1          unsigned int  unLen;
 100   1          unsigned char ucComMF522Buf[MAXRLEN]; 
 101   1          
 102   1          ucComMF522Buf[0] = PICC_ANTICOLL1;
 103   1          ucComMF522Buf[1] = 0x70;
 104   1          ucComMF522Buf[6] = 0;
 105   1          for (i=0; i<4; i++)
 106   1          {
 107   2            ucComMF522Buf[i+2] = *(pSnr+i);
 108   2            ucComMF522Buf[6]  ^= *(pSnr+i);
 109   2          }
 110   1          CalulateCRC(ucComMF522Buf,7,&ucComMF522Buf[7]);
 111   1        
 112   1          ClearBitMask(Status2Reg,0x08);
 113   1      
 114   1          status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,9,ucComMF522Buf,&unLen);
 115   1          
 116   1          if ((status == MI_OK) && (unLen == 0x18))
 117   1          {   status = MI_OK;  }
C51 COMPILER V9.52.0.0   RC522                                                             12/07/2014 15:55:12 PAGE 3   

 118   1          else
 119   1          {   status = MI_ERR;    }
 120   1      
 121   1          return status;
 122   1      }
 123          
 124          /////////////////////////////////////////////////////////////////////
 125          //功    能：验证卡片密码
 126          //参数说明: auth_mode[IN]: 密码验证模式
 127          //                 0x60 = 验证A密钥
 128          //                 0x61 = 验证B密钥 
 129          //          addr[IN]：块地址
 130          //          pKey[IN]：密码
 131          //          pSnr[IN]：卡片序列号，4字节
 132          //返    回: 成功返回MI_OK
 133          /////////////////////////////////////////////////////////////////////               
 134          char PcdAuthState(unsigned char auth_mode,unsigned char addr,unsigned char *pKey,unsigned char *pSnr)
 135          {
 136   1          char status;
 137   1          unsigned int  unLen;
 138   1          unsigned char i,ucComMF522Buf[MAXRLEN]; 
 139   1      
 140   1          ucComMF522Buf[0] = auth_mode;
 141   1          ucComMF522Buf[1] = addr;
 142   1          for (i=0; i<6; i++)
 143   1          {    ucComMF522Buf[i+2] = *(pKey+i);   }
 144   1          for (i=0; i<6; i++)
 145   1          {    ucComMF522Buf[i+8] = *(pSnr+i);   }
 146   1       //   memcpy(&ucComMF522Buf[2], pKey, 6); 
 147   1       //   memcpy(&ucComMF522Buf[8], pSnr, 4); 
 148   1          
 149   1          status = PcdComMF522(PCD_AUTHENT,ucComMF522Buf,12,ucComMF522Buf,&unLen);
 150   1          if ((status != MI_OK) || (!(ReadRawRC(Status2Reg) & 0x08)))
 151   1          {   status = MI_ERR;   }
 152   1          
 153   1          return status;
 154   1      }
 155          
 156          /////////////////////////////////////////////////////////////////////
 157          //功    能：读取M1卡一块数据
 158          //参数说明: addr[IN]：块地址
 159          //          pData[OUT]：读出的数据，16字节
 160          //返    回: 成功返回MI_OK
 161          ///////////////////////////////////////////////////////////////////// 
 162          char PcdRead(unsigned char addr,unsigned char *pData)
 163          {
 164   1          char status;
 165   1          unsigned int  unLen;
 166   1          unsigned char i,ucComMF522Buf[MAXRLEN]; 
 167   1      
 168   1          ucComMF522Buf[0] = PICC_READ;
 169   1          ucComMF522Buf[1] = addr;
 170   1          CalulateCRC(ucComMF522Buf,2,&ucComMF522Buf[2]);
 171   1         
 172   1          status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,4,ucComMF522Buf,&unLen);
 173   1          if ((status == MI_OK) && (unLen == 0x90))
 174   1       //   {   memcpy(pData, ucComMF522Buf, 16);   }
 175   1          {
 176   2              for (i=0; i<16; i++)
 177   2              {    *(pData+i) = ucComMF522Buf[i];   }
 178   2          }
 179   1          else
C51 COMPILER V9.52.0.0   RC522                                                             12/07/2014 15:55:12 PAGE 4   

 180   1          {   status = MI_ERR;   }
 181   1          
 182   1          return status;
 183   1      }
 184          
 185          /////////////////////////////////////////////////////////////////////
 186          //功    能：写数据到M1卡一块
 187          //参数说明: addr[IN]：块地址
 188          //          pData[IN]：写入的数据，16字节
 189          //返    回: 成功返回MI_OK
 190          /////////////////////////////////////////////////////////////////////                  
 191          char PcdWrite(unsigned char addr,unsigned char *pData)
 192          {
 193   1          char status;
 194   1          unsigned int  unLen;
 195   1          unsigned char i,ucComMF522Buf[MAXRLEN]; 
 196   1          
 197   1          ucComMF522Buf[0] = PICC_WRITE;
 198   1          ucComMF522Buf[1] = addr;
 199   1          CalulateCRC(ucComMF522Buf,2,&ucComMF522Buf[2]);
 200   1       
 201   1          status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,4,ucComMF522Buf,&unLen);
 202   1      
 203   1          if ((status != MI_OK) || (unLen != 4) || ((ucComMF522Buf[0] & 0x0F) != 0x0A))
 204   1          {   status = MI_ERR;   }
 205   1              
 206   1          if (status == MI_OK)
 207   1          {
 208   2              //memcpy(ucComMF522Buf, pData, 16);
 209   2              for (i=0; i<16; i++)
 210   2              {    ucComMF522Buf[i] = *(pData+i);   }
 211   2              CalulateCRC(ucComMF522Buf,16,&ucComMF522Buf[16]);
 212   2      
 213   2              status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,18,ucComMF522Buf,&unLen);
 214   2              if ((status != MI_OK) || (unLen != 4) || ((ucComMF522Buf[0] & 0x0F) != 0x0A))
 215   2              {   status = MI_ERR;   }
 216   2          }
 217   1          
 218   1          return status;
 219   1      }
 220          
 221          
 222          
 223          /////////////////////////////////////////////////////////////////////
 224          //功    能：命令卡片进入休眠状态
 225          //返    回: 成功返回MI_OK
 226          /////////////////////////////////////////////////////////////////////
 227          char PcdHalt(void)
 228          {
 229   1          char status;
 230   1          unsigned int  unLen;
 231   1          unsigned char ucComMF522Buf[MAXRLEN]; 
 232   1      
 233   1          ucComMF522Buf[0] = PICC_HALT;
 234   1          ucComMF522Buf[1] = 0;
 235   1          CalulateCRC(ucComMF522Buf,2,&ucComMF522Buf[2]);
 236   1       
 237   1          status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,4,ucComMF522Buf,&unLen);
 238   1      
 239   1          return MI_OK;
 240   1      }
 241          
C51 COMPILER V9.52.0.0   RC522                                                             12/07/2014 15:55:12 PAGE 5   

 242          /////////////////////////////////////////////////////////////////////
 243          //用MF522计算CRC16函数
 244          /////////////////////////////////////////////////////////////////////
 245          void CalulateCRC(unsigned char *pIndata,unsigned char len,unsigned char *pOutData)
 246          {
 247   1          unsigned char i,n;
 248   1          ClearBitMask(DivIrqReg,0x04);
 249   1          WriteRawRC(CommandReg,PCD_IDLE);
 250   1          SetBitMask(FIFOLevelReg,0x80);
 251   1          for (i=0; i<len; i++)
 252   1          {   WriteRawRC(FIFODataReg, *(pIndata+i));   }
 253   1          WriteRawRC(CommandReg, PCD_CALCCRC);
 254   1          i = 0xFF;
 255   1          do 
 256   1          {
 257   2              n = ReadRawRC(DivIrqReg);
 258   2              i--;
 259   2          }
 260   1          while ((i!=0) && !(n&0x04));
 261   1          pOutData[0] = ReadRawRC(CRCResultRegL);
 262   1          pOutData[1] = ReadRawRC(CRCResultRegM);
 263   1      }
 264          
 265          /////////////////////////////////////////////////////////////////////
 266          //功    能：复位RC522
 267          //返    回: 成功返回MI_OK
 268          /////////////////////////////////////////////////////////////////////
 269          char PcdReset(void)
 270          {
 271   1          MF522_RST=1;
 272   1          _nop_();
 273   1          MF522_RST=0;
 274   1          _nop_();
 275   1          MF522_RST=1;
 276   1           _nop_();
 277   1      
 278   1          WriteRawRC(CommandReg,PCD_RESETPHASE);
 279   1          _nop_();
 280   1          
 281   1          WriteRawRC(ModeReg,0x3D);            //和Mifare卡通讯，CRC初始值0x6363
 282   1          WriteRawRC(TReloadRegL,30);           
 283   1          WriteRawRC(TReloadRegH,0);
 284   1          WriteRawRC(TModeReg,0x8D);
 285   1          WriteRawRC(TPrescalerReg,0x3E);
 286   1          WriteRawRC(TxAutoReg,0x40);     
 287   1          return MI_OK;
 288   1      }
 289          //////////////////////////////////////////////////////////////////////
 290          //设置RC632的工作方式 
 291          //////////////////////////////////////////////////////////////////////
 292          char M500PcdConfigISOType(unsigned char type)
 293          {
 294   1         if (type == 'A')                     //ISO14443_A
 295   1         { 
 296   2             ClearBitMask(Status2Reg,0x08);
 297   2      
 298   2       /*     WriteRawRC(CommandReg,0x20);    //as default   
 299   2             WriteRawRC(ComIEnReg,0x80);     //as default
 300   2             WriteRawRC(DivlEnReg,0x0);      //as default
 301   2           WriteRawRC(ComIrqReg,0x04);     //as default
 302   2           WriteRawRC(DivIrqReg,0x0);      //as default
 303   2           WriteRawRC(Status2Reg,0x0);//80    //trun off temperature sensor
C51 COMPILER V9.52.0.0   RC522                                                             12/07/2014 15:55:12 PAGE 6   

 304   2           WriteRawRC(WaterLevelReg,0x08); //as default
 305   2             WriteRawRC(ControlReg,0x20);    //as default
 306   2           WriteRawRC(CollReg,0x80);    //as default
 307   2      */
 308   2             WriteRawRC(ModeReg,0x3D);//3F
 309   2      /*     WriteRawRC(TxModeReg,0x0);      //as default???
 310   2           WriteRawRC(RxModeReg,0x0);      //as default???
 311   2           WriteRawRC(TxControlReg,0x80);  //as default???
 312   2      
 313   2           WriteRawRC(TxSelReg,0x10);      //as default???
 314   2         */
 315   2             WriteRawRC(RxSelReg,0x86);//84
 316   2       //      WriteRawRC(RxThresholdReg,0x84);//as default
 317   2       //      WriteRawRC(DemodReg,0x4D);      //as default
 318   2      
 319   2       //      WriteRawRC(ModWidthReg,0x13);//26
 320   2             WriteRawRC(RFCfgReg,0x7F);   //4F
 321   2        /*   WriteRawRC(GsNReg,0x88);        //as default???
 322   2           WriteRawRC(CWGsCfgReg,0x20);    //as default???
 323   2             WriteRawRC(ModGsCfgReg,0x20);   //as default???
 324   2      */
 325   2             WriteRawRC(TReloadRegL,30);//tmoLength);// TReloadVal = 'h6a =tmoLength(dec) 
 326   2           WriteRawRC(TReloadRegH,0);
 327   2             WriteRawRC(TModeReg,0x8D);
 328   2           WriteRawRC(TPrescalerReg,0x3E);
 329   2           
 330   2      
 331   2        //     PcdSetTmo(106);
 332   2           delay_10ms(1);
 333   2             PcdAntennaOn();
 334   2         }
 335   1         else{ return -1; }
 336   1         
 337   1         return MI_OK;
 338   1      }
 339          /////////////////////////////////////////////////////////////////////
 340          //功    能：读RC632寄存器
 341          //参数说明：Address[IN]:寄存器地址
 342          //返    回：读出的值
 343          /////////////////////////////////////////////////////////////////////
 344          unsigned char ReadRawRC(unsigned char Address)
 345          {
 346   1           unsigned char i, ucAddr;
 347   1           unsigned char ucResult=0;
 348   1      
 349   1           MF522_NSS = 0;
 350   1           ucAddr = ((Address<<1)&0x7E)|0x80;
 351   1      
 352   1           for(i=8;i>0;i--)
 353   1           {
 354   2               MF522_SCK = 0;
 355   2           if(ucAddr&0x80)
 356   2                MF522_MOSI = 1;
 357   2           else
 358   2            MF522_MOSI = 0;
 359   2               MF522_SCK = 1;
 360   2               ucAddr <<= 1;
 361   2           }
 362   1      
 363   1           for(i=8;i>0;i--)
 364   1           {
 365   2               MF522_SCK = 0;
C51 COMPILER V9.52.0.0   RC522                                                             12/07/2014 15:55:12 PAGE 7   

 366   2               ucResult <<= 1;
 367   2               MF522_SCK = 1;
 368   2           if(MF522_MISO == 1)
 369   2                ucResult |= 1;
 370   2           }
 371   1      
 372   1           MF522_NSS = 1;
 373   1           MF522_SCK = 1;
 374   1           return ucResult;
 375   1      }
 376          
 377          /////////////////////////////////////////////////////////////////////
 378          //功    能：写RC632寄存器
 379          //参数说明：Address[IN]:寄存器地址
 380          //          value[IN]:写入的值
 381          /////////////////////////////////////////////////////////////////////
 382          void WriteRawRC(unsigned char Address, unsigned char value)
 383          {  
 384   1          unsigned char i, ucAddr;
 385   1      
 386   1          MF522_SCK = 0;
 387   1          MF522_NSS = 0;
 388   1          ucAddr = ((Address<<1)&0x7E);
 389   1      
 390   1          for(i=8;i>0;i--)
 391   1          {
 392   2          if(ucAddr&0x80)
 393   2                MF522_MOSI = 1;
 394   2          else
 395   2            MF522_MOSI = 0;
 396   2              MF522_SCK = 1;
 397   2              ucAddr <<= 1;
 398   2              MF522_SCK = 0;
 399   2          }
 400   1      
 401   1          for(i=8;i>0;i--)
 402   1          {
 403   2          if(value&0x80)
 404   2                MF522_MOSI = 1;
 405   2          else
 406   2            MF522_MOSI = 0;
 407   2              MF522_SCK = 1;
 408   2              value <<= 1;
 409   2              MF522_SCK = 0;
 410   2          }
 411   1          MF522_NSS = 1;
 412   1          MF522_SCK = 1;
 413   1      }
 414          
 415          /////////////////////////////////////////////////////////////////////
 416          //功    能：置RC522寄存器位
 417          //参数说明：reg[IN]:寄存器地址
 418          //          mask[IN]:置位值
 419          /////////////////////////////////////////////////////////////////////
 420          void SetBitMask(unsigned char reg,unsigned char mask)  
 421          {
 422   1          char tmp = 0x0;
 423   1          tmp = ReadRawRC(reg);
 424   1          WriteRawRC(reg,tmp | mask);  // set bit mask
 425   1      }
 426          
 427          /////////////////////////////////////////////////////////////////////
C51 COMPILER V9.52.0.0   RC522                                                             12/07/2014 15:55:12 PAGE 8   

 428          //功    能：清RC522寄存器位
 429          //参数说明：reg[IN]:寄存器地址
 430          //          mask[IN]:清位值
 431          /////////////////////////////////////////////////////////////////////
 432          void ClearBitMask(unsigned char reg,unsigned char mask)  
 433          {
 434   1          char tmp = 0x0;
 435   1          tmp = ReadRawRC(reg);
 436   1          WriteRawRC(reg, tmp & ~mask);  // clear bit mask
 437   1      } 
 438          
 439          /////////////////////////////////////////////////////////////////////
 440          //功    能：通过RC522和ISO14443卡通讯
 441          //参数说明：Command[IN]:RC522命令字
 442          //          pInData[IN]:通过RC522发送到卡片的数据
 443          //          InLenByte[IN]:发送数据的字节长度
 444          //          pOutData[OUT]:接收到的卡片返回数据
 445          //          *pOutLenBit[OUT]:返回数据的位长度
 446          /////////////////////////////////////////////////////////////////////
 447          char PcdComMF522(unsigned char Command, 
 448                           unsigned char *pInData, 
 449                           unsigned char InLenByte,
 450                           unsigned char *pOutData, 
 451                           unsigned int  *pOutLenBit)
 452          {
 453   1          char status = MI_ERR;
 454   1          unsigned char irqEn   = 0x00;
 455   1          unsigned char waitFor = 0x00;
 456   1          unsigned char lastBits;
 457   1          unsigned char n;
 458   1          unsigned int i;
 459   1          switch (Command)
 460   1          {
 461   2             case PCD_AUTHENT:
 462   2                irqEn   = 0x12;
 463   2                waitFor = 0x10;
 464   2                break;
 465   2             case PCD_TRANSCEIVE:
 466   2                irqEn   = 0x77;
 467   2                waitFor = 0x30;
 468   2                break;
 469   2             default:
 470   2               break;
 471   2          }
 472   1         
 473   1          WriteRawRC(ComIEnReg,irqEn|0x80);
 474   1          ClearBitMask(ComIrqReg,0x80);
 475   1          WriteRawRC(CommandReg,PCD_IDLE);
 476   1          SetBitMask(FIFOLevelReg,0x80);
 477   1          
 478   1          for (i=0; i<InLenByte; i++)
 479   1          {   WriteRawRC(FIFODataReg, pInData[i]);    }
 480   1          WriteRawRC(CommandReg, Command);
 481   1         
 482   1          
 483   1          if (Command == PCD_TRANSCEIVE)
 484   1          {    SetBitMask(BitFramingReg,0x80);  }
 485   1          
 486   1      //    i = 600;//根据时钟频率调整，操作M1卡最大等待时间25ms
 487   1       i = 2000;
 488   1          do 
 489   1          {
C51 COMPILER V9.52.0.0   RC522                                                             12/07/2014 15:55:12 PAGE 9   

 490   2               n = ReadRawRC(ComIrqReg);
 491   2               i--;
 492   2          }
 493   1          while ((i!=0) && !(n&0x01) && !(n&waitFor));
 494   1          ClearBitMask(BitFramingReg,0x80);
 495   1              
 496   1          if (i!=0)
 497   1          {    
 498   2               if(!(ReadRawRC(ErrorReg)&0x1B))
 499   2               {
 500   3                   status = MI_OK;
 501   3                   if (n & irqEn & 0x01)
 502   3                   {   status = MI_NOTAGERR;   }
 503   3                   if (Command == PCD_TRANSCEIVE)
 504   3                   {
 505   4                      n = ReadRawRC(FIFOLevelReg);
 506   4                      lastBits = ReadRawRC(ControlReg) & 0x07;
 507   4                      if (lastBits)
 508   4                      {   *pOutLenBit = (n-1)*8 + lastBits;   }
 509   4                      else
 510   4                      {   *pOutLenBit = n*8;   }
 511   4                      if (n == 0)
 512   4                      {   n = 1;    }
 513   4                      if (n > MAXRLEN)
 514   4                      {   n = MAXRLEN;   }
 515   4                      for (i=0; i<n; i++)
 516   4                      {   pOutData[i] = ReadRawRC(FIFODataReg);    }
 517   4                  }
 518   3               }
 519   2               else
 520   2               {   status = MI_ERR;   }
 521   2              
 522   2         }
 523   1         
 524   1      
 525   1         SetBitMask(ControlReg,0x80);           // stop timer now
 526   1         WriteRawRC(CommandReg,PCD_IDLE); 
 527   1         return status;
 528   1      }
 529          
 530          
 531          /////////////////////////////////////////////////////////////////////
 532          //开启天线  
 533          //每次启动或关闭天险发射之间应至少有1ms的间隔
 534          /////////////////////////////////////////////////////////////////////
 535          void PcdAntennaOn()
 536          {
 537   1          unsigned char i;
 538   1          i = ReadRawRC(TxControlReg);
 539   1          if (!(i & 0x03))
 540   1          {
 541   2              SetBitMask(TxControlReg, 0x03);
 542   2          }
 543   1      }
 544          
 545          
 546          /////////////////////////////////////////////////////////////////////
 547          //关闭天线
 548          /////////////////////////////////////////////////////////////////////
 549          void PcdAntennaOff()
 550          {
 551   1          ClearBitMask(TxControlReg, 0x03);
C51 COMPILER V9.52.0.0   RC522                                                             12/07/2014 15:55:12 PAGE 10  

 552   1      }
 553          
 554          //等待卡离开
 555          void WaitCardOff(void)
 556          {
 557   1        char status, TagType[2];
 558   1      
 559   1        while(1)
 560   1        {
 561   2          status = PcdRequest(REQ_ALL, TagType);
 562   2          if(status)
 563   2          {
 564   3            status = PcdRequest(REQ_ALL, TagType);
 565   3            if(status)
 566   3            {
 567   4              status = PcdRequest(REQ_ALL, TagType);
 568   4              if(status)
 569   4              {
 570   5                return;
 571   5              }
 572   4            }
 573   3          }
 574   2          delay_10ms(1);
 575   2        }
 576   1      }
 577          
 578          ///////////////////////////////////////////////////////////////////////
 579          // Delay 10ms
 580          ///////////////////////////////////////////////////////////////////////
 581          void delay_10ms(unsigned int _10ms)
 582          {
 583   1        unsigned int i, j;
 584   1      
 585   1        for(i=0; i<_10ms; i++)
 586   1        {
 587   2          for(j=0; j<10000; j++);
 588   2        }
 589   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1656    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----     195
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
